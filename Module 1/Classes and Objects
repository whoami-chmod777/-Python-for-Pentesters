
-- Classes and Objects in Python --

1. What is a Class?
A class is a blueprint for creating objects. It defines a set of attributes (variables) and methods (functions) that the objects created from the class will have.

Syntax:
class ClassName:
    # class attributes and methods go here

2. What is an Object?
An object is an instance of a class. When a class is defined, no memory is allocated until an object of that class is created.

Example:
my_object = ClassName()  # Create an object from the class

3. Attributes and Methods
- Attributes: Variables that hold data associated with the object.
- Methods: Functions that define the behavior of an object.

4. Constructor Method (__init__)
The __init__ method is a special method in Python classes that gets called automatically when an object is created. It is used to initialize the object's attributes.

Key Concepts:
1. Class Attribute (species): Shared by all instances of the class.
2. Instance Attributes (name, age): Specific to each object.
3. Methods (bark, dog_info): Behaviors that the objects can perform.
4. __init__ Method: Called when a new object is created to initialize instance attributes.

5. Encapsulation
Encapsulation refers to restricting access to certain variables and methods. This can be done by making attributes private using an underscore (_) or double underscore (__).

6. Inheritance
Inheritance allows one class to inherit the attributes and methods of another class. This helps in reusing code. Inheritence means extending the functionality of the class !!!

7. Polymorphism
Polymorphism allows different classes to have methods with the same name but potentially different implementations.


-- Classes Examples --

- Classdemo I -

#!/usr/bin/python

class Calculator:

    def __init__(self, ina, inb):
        self.a = ina
        self.b = inb

    def add(self):
        return self.a + self.b

    def mul(self):
        return self.a*self.b

newCalculation = Calculator(10, 20)

print 'a+b: %d' %newCalculation.add()
print 'a*b: %d' %newCalculation.mul()







- Inheritence Classdemo -

class Calculator:

    def __init__(self, ina, inb):
        self.a = ina
        self.b = inb

     def add(self):
        return self.a + self.b

    def mul(self):
        return self.a*self.b


class Scientific(Calculator):

    def power(self):
        return pow(self.a, self.b)


newCalculation = Calculator(10, 20)

print 'a+b: %d' %newCalculation.add()
print 'a*b: %d' %newCalculation.mul()

newPower = Scientific(2,3)

print 'a+b: %d' %newPower.add()
print 'a*b: %d' %newPower.mul()

print 'a pow b: %d' %newPower.power()















