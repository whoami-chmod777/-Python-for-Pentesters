
-- Classes and Objects in Python --

1. What is a Class?
A class is a blueprint for creating objects. It defines a set of attributes (variables) and methods (functions) that the objects created from the class will have.

Syntax:
class ClassName:
    # class attributes and methods go here

2. What is an Object?
An object is an instance of a class. When a class is defined, no memory is allocated until an object of that class is created.

Example:
my_object = ClassName()  # Create an object from the class

3. Attributes and Methods
- Attributes: Variables that hold data associated with the object.
- Methods: Functions that define the behavior of an object.

4. Constructor Method (__init__)
The __init__ method is a special method in Python classes that gets called automatically when an object is created. It is used to initialize the object's attributes.

Key Concepts:
1. Class Attribute (species): Shared by all instances of the class.
2. Instance Attributes (name, age): Specific to each object.
3. Methods (bark, dog_info): Behaviors that the objects can perform.
4. __init__ Method: Called when a new object is created to initialize instance attributes.

5. Encapsulation
Encapsulation refers to restricting access to certain variables and methods. This can be done by making attributes private using an underscore (_) or double underscore (__).

6. Inheritance
Inheritance allows one class to inherit the attributes and methods of another class. This helps in reusing code. Inheritence means extending the functionality of the class !!!

7. Polymorphism
Polymorphism allows different classes to have methods with the same name but potentially different implementations.


-- What are Global, Class and Instance Variables in Python --

Global Variables
- Global variables are declared outside of any function or class, typically at the module level.
- They are accessible from any part of the module in which they are defined.
- Global variables can also be accessed from other modules if they are imported.
- Their scope is the entire module, and they persist for the duration of the program's execution.

global_variable = 10

def some_function():
    print(global_variable)

some_function()  # This function can access global_variable


Class Variables:
- Class variables are shared among all instances (objects) of a class.
- They are defined within a class but outside any method.
- Class variables are usually used to store attributes or properties that are common to all instances of the class.
- When a class variable is modified, the change is reflected in all instances of the class.

class MyClass:
    class_variable = 5

obj1 = MyClass()
obj2 = MyClass()

print(obj1.class_variable)  # 5
print(obj2.class_variable)  # 5

MyClass.class_variable = 10
print(obj1.class_variable)  # 10 (changed for all instances)
print(obj2.class_variable)  # 10


Instance Variables:
- Instance variables are unique to each instance (object) of a class.
- They are defined within the class's methods, typically in the constructor (`__init__` method).
- Each instance of the class has its own separate copy of instance variables.
- Instance variables are used to store data that is specific to a particular instance.

class MyClass:
    def __init__(self, value):
        self.instance_variable = value

obj1 = MyClass(5)
obj2 = MyClass(10)

print(obj1.instance_variable)  # 5 (specific to obj1)
print(obj2.instance_variable)  # 10 (specific to obj2)


-- How can we override a method in parent class --

To override a method in the parent class, you simply define a method with the same name in the child class. When you create an object of the child class and call that method, Python will use the child class’s version of the method.

1. Define a Parent Class:
First, create a parent class (base class) with the method you want to override.

class ParentClass:
    def some_method(self):
        print("This is the method from the ParentClass")

2. Create a Subclass:
Create a subclass that inherits from the parent class. This is done by specifying the parent class in the subclass's definition.

class Subclass(ParentClass):
    def some_method(self):
        print("This is the method from the Subclass")

3. Override the Method:
In the subclass, define a method with the same name as the method you want to override. This method will replace the method with the same name from the parent class.

4. Customize the Behavior:
Inside the overridden method in the subclass, you can provide custom behavior that is specific to the subclass. This can include additional functionality, changes to the behavior, or completely different logic.

class ParentClass:
    def some_method(self):
        print("This is the method from the ParentClass")

class Subclass(ParentClass):
    def some_method(self):
        print("This is the method from the Subclass")

# Create instances of the classes
parent_instance = ParentClass()
subclass_instance = Subclass()

# Call the overridden method
parent_instance.some_method()  # Output: "This is the method from the ParentClass"
subclass_instance.some_method()  # Output: "This is the method from the Subclass"

In this example, the 'some_method' in the 'Subclass' overrides the method with the same name in the 'ParentClass'. When you call the method on instances of the respective classes, the overridden method in the subclass is executed, providing custom behavior specific to the subclass.


-- Another Example of Method Overriding --

Here’s an example where we override the make_sound method from a parent class Animal in the child classes Dog and Cat.

class Animal:
    def make_sound(self):
        return "Some generic animal sound"

class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

# Create instances of the child classes
dog = Dog()
cat = Cat()

# Call the overridden methods
print(dog.make_sound())  # Output: Woof!
print(cat.make_sound())  # Output: Meow!


1. Parent Class (Animal): Defines a make_sound method that returns a generic animal sound.
2. Child Class (Dog): Overrides the make_sound method to return "Woof!".
3. Child Class (Cat): Overrides the make_sound method to return "Meow!".

When you create an object of the Dog or Cat class and call make_sound, Python will use the overridden method in the child class instead of the one in the parent class.


-- Classes Examples --

- Classdemo I -

#!/usr/bin/python

class Calculator:

    def __init__(self, ina, inb):
        self.a = ina
        self.b = inb

    def add(self):
        return self.a + self.b

    def mul(self):
        return self.a*self.b

newCalculation = Calculator(10, 20)

print 'a+b: %d' %newCalculation.add()
print 'a*b: %d' %newCalculation.mul()


- Inheritence Classdemo -

class Calculator:

    def __init__(self, ina, inb):
        self.a = ina
        self.b = inb

     def add(self):
        return self.a + self.b

    def mul(self):
        return self.a*self.b


class Scientific(Calculator):

    def power(self):
        return pow(self.a, self.b)


newCalculation = Calculator(10, 20)

print 'a+b: %d' %newCalculation.add()
print 'a*b: %d' %newCalculation.mul()

newPower = Scientific(2,3)

print 'a+b: %d' %newPower.add()
print 'a*b: %d' %newPower.mul()

print 'a pow b: %d' %newPower.power()















