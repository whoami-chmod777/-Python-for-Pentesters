
â€¢ Python allows for user defined exceptions. Code up a demo which has a user defined exception and an example use case

In Python, you can create custom exceptions by defining a new class that inherits from the built-in `Exception` class or one of its subclasses. Here's a simple example of creating a custom exception and using it in a program:

# Define a custom exception class
class CustomError(Exception):
    def __init__(self, message):
        super().__init__(message)

# Example use case
def divide(a, b):
    if b == 0:
        raise CustomError("Division by zero is not allowed")
    return a / b

try:
    result = divide(10, 2)
    print("Result:", result)
    
    result = divide(5, 0)  # This will raise a CustomError
    print("Result:", result)  # This line won't be executed
except CustomError as e:
    print("CustomError:", e)
except ZeroDivisionError as e:
    print("ZeroDivisionError:", e)
except Exception as e:
    print("Exception:", e)


Custom exceptions are useful for creating meaningful and specific error handling in your code.

#!/usr/bin/python
# This sample code is part of the SecurityTube Python Scripting Expert course and certification
# Website : http://securitytube-training.com
# Author: Vivek Ramachandran

# simple script to check for Disallow in robots.txt 

# simple custom exception to throw if a Disallow is found 

class DisallowPresent(Exception) :

	def __init__(self, path) :
		self.disallowed_path = path

	def __str__(self) :
		return repr(self.disallowed_path) 

import urllib2

secTube = urllib2.urlopen('http://www.bbc.co.uk/robots.txt')

for line in secTube.readlines():
    try :
	if line.lower().find('disallow') != -1 :
		print line.strip()
		raise DisallowPresent(line.split(':')[1].strip())

    except DisallowPresent as ex :
		print "Exception occured for path : " +ex.disallowed_path


